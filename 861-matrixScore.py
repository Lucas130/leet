"""
有一个二维矩阵 A 其中每个元素的值为 0 或 1 。
移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 0 都更改为 1，将所有 1 都更改为 0。
在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。
返回尽可能高的分数。
示例：
输入：[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
输出：39
解释：
转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]
0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
"""
"""
1.将行翻转，保证第一列为1
2.翻转剩下的列，求每列1最多
"""

class Solution:
    def matrixScore(self, A) -> int:
        n, m = len(A), len(A[0])
        ret = (1 << (m - 1)) * n
        for i in range(1, m):
            ones = 0
            for row in A:
                # 最终要的一步，这个用来判断第一列都为1后剩下位是否为1的依据
                if row[i] == row[0]:
                    ones += 1
            if ones < n - ones:
                ones = n - ones
            ret += (1 << (m - i - 1)) * ones
        return ret

if __name__ == '__main__':
    s = Solution()
    A = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
    print(s.matrixScore(A))





